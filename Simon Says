using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    private List<int> playerTaskList = new List<int>();
    private List<int> playerSequenceList = new List<int>();

    //public List<AudioClip> buttonSoundsList = new List<AudioClip>();

    public List<List<Color32>> buttonColors = new List<List<Color32>>();

    public List<Button> clickableButtons;

    //public Audioclip loseSound;

    //public AudioSource audioSource;

    public CanvasGroup buttons;

    public GameObject startButton;

    public void Awake()
    {
        buttonColors.Add(new List<Color32> { new Color32(255, 100, 100, 255), new Color32(255, 0, 0, 255) }); //add red
        buttonColors.Add(new List<Color32> { new Color32(255, 187, 109, 255), new Color32(255, 136, 0, 255) }); //add orange
        buttonColors.Add(new List<Color32> { new Color32(162, 255, 124, 255), new Color32(72, 248, 0, 255) }); //add green
        buttonColors.Add(new List<Color32> { new Color32(57, 111, 255, 255), new Color32(0, 70, 255, 255) }); //add blue

        clickableButtons[0].GetComponent<Image>().color = buttonColors[0][0];
        clickableButtons[1].GetComponent<Image>().color = buttonColors[1][0];
        clickableButtons[2].GetComponent<Image>().color = buttonColors[2][0];
        clickableButtons[3].GetComponent<Image>().color = buttonColors[3][0];

        for (int i = 0; i < 4; 1++)
        {
            clickableButtons[i].GetComponent<Image>().color = buttonColors[i][0];
        }
    }

    public void AddToPlayerSequenceList(int buttonId)
    {
        playerSequenceList.Add(buttonId);
        StartCoroutine(HighlightButton(buttonId));

        for (int i = 0; i < playerSequenceList.Count; i++) //Runs for as many buttons the player inputs.
        {
            if (playerTaskList[i] == playerSequenceList[i]) //Checks if the button the player selects matches the button of the original sequence. If yes, allow the player to continue. If no, the player fails.
            {
                continue;
            }
            else
            {
                StartCoroutine(PlayerLost());
                return;
            }
        }

        if (playerSequenceList.Count == playerTaskList.Count) //If the inputs the player provides matches the sequence given to them, it is considered a 'success' and the next round starts.
        {
            StartCoroutine(StartNextRound());
        }
    }

    public void StartGame()
    {
        StartCoroutine(StartNextRound());
        startButton.SetActive(false);
    }

    public IEnumerator HighlightButton(int buttonId) //Selected button lights up (lighter version of original color), waits, and then returns to it's original color.
    {
        clickableButtons[buttonId].GetComponent<Image>().color = buttonColors[buttonId][1]; //Hightlighted color
        //audioSource.PlayOneShot(buttonSoundsList[buttonId]);
        yield return new WaitForSeconds(0.5f);
        clickableButtons[buttonId].GetComponent<Image>().color = buttonColors[buttonId][0]; //Original color
    }

    public IEnumerator PlayerLost() //Runs if the player inputs a button in the sequence incorrectly (does not match original sequence).
    {
        //audioSource.PlayOneShot(loseSound);
        playerSequenceList.Clear(); //Clears the player's inputs.
        yield return new WaitForSeconds(2f);
        startButton.SetActive(true); //Allows the simon says to be started again.
    }

    public IEnumerator StartNextRound() //Begins the next sequence. Waits a second to give the player momenet to prepare themself.
    {
        playerSequenceList.Clear(); //Clears the previous computer sequence.
        buttons.interactable = false;
        yield return new WaitForSeconds(1f);
        playerTaskList.Add(Random.Range(0, 4)); //Random length of sequence between 1-4.

        foreach(inx index in playerTaskList) 
        {
            yield return StartCoroutine(HighlightButton(index));
        }

        buttons.interactable = true;
        yield return null;
    }
}

